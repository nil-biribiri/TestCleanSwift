//
//  MainViewControllerTests.swift
//  TestCleanSwift
//
//  Created by Tanasak.Nge on 12/6/2561 BE.
//  Copyright (c) 2561 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import TestCleanSwift
import XCTest

class MainViewControllerTests: XCTestCase {
  // MARK: Subject under test
  
  var sut: MainViewController!
  var window: UIWindow!
  
  // MARK: Test lifecycle
  
  override func setUp() {
    super.setUp()
    window = UIWindow()
    setupMainViewController()
  }
  
  override func tearDown() {
    window = nil
    super.tearDown()
  }
  
  // MARK: Test setup
  
  func setupMainViewController() {
    sut = MainViewController()
  }
  
  func loadView() {
    window.addSubview(sut.view)
    RunLoop.current.run(until: Date())
  }
  
  // MARK: Test doubles
  
  class MainBusinessLogicSpy: MainBusinessLogic {

    // MARK: Method call expectations
    
    var fetchMovieCalled = false
    
    var fetchMoreMovieCalled = false {
      didSet {
        fetchMoreMovieCalledTimes += 1
      }
    }
    var fetchMoreMovieCalledTimes = 0
    var fetchMoreMovieCalledCorrect = false
    
    var refreshMovieCalled = false
    var validateInputCalled = false
    // MARK: Spied methods

    func fetchMovie(request: Main.Something.Request) {
      fetchMovieCalled = true
    }
    
    func fetchMoreMovie(request: Main.Something.Request) {
      fetchMoreMovieCalled = true
    }
    
    func refreshMovie(request: Main.Something.Request) {
      refreshMovieCalled = true
    }
    
    func validateInput(textInput: String?, indexPath: Int) {
      validateInputCalled = true
    }
  }
  
  class TableViewSpy: UITableView {
    // MARK: Method call expectations
    
    var reloadDataCalled = false
    
    // MARK: Spied methods
    
    override func reloadData()
    {
      reloadDataCalled = true
    }


  }

  // MARK: Tests
  
  func testShouldFetchMovieWhenViewIsLoaded() {
    // Given
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    
    // When
    loadView()
    
    // Then
    XCTAssertTrue(spy.fetchMovieCalled, "viewDidLoad() should ask the interactor to fetch movie")
  }
  
  func testDisplayFetchList() {
    // Given
    let tableViewSpy = TableViewSpy()
    sut.tableView = tableViewSpy
    sut.tableView.refreshControl?.beginRefreshing()
    sut.tableView.tableFooterView = UIView()
    
    // When
    let mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path", movieInputErrorMessage: nil)]
    let viewModel = Main.Something.ViewModel(movieList: mockMovieList)
    sut.displayFetchList(viewModel: viewModel)
    
    
    // Then
    XCTAssertEqual(sut.tableView.refreshControl?.isRefreshing, false, "displayFetchList(viewModel: ) should hide load more indicator at the top of tableView")
    XCTAssertEqual(sut.tableView.tableFooterView, nil, "displayFetchList(viewModel: ) should hide load more indicator at the bottom of tableView")
    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
      XCTAssert(tableViewSpy.reloadDataCalled, "displayFetchList(viewModel: ) should reload the table view after animation 0.1 sec")
    }
  }
  
  func testDisplayError() {
    // Given
    loadView()
    
    
    // When
    sut.displayError(title: "Error", message: "error message")
    let alertController = sut.presentedViewController as? UIAlertController
    
    
    // Then
    XCTAssertNotNil(alertController, "displayError(title: , message: ) should show alert view controller")
    XCTAssertEqual(alertController?.title, "Error")
    XCTAssertEqual(alertController?.message, "error message")
  }
  
  func testTableViewSectionShouldAlwaysBeOne() {
    // Given
    loadView()
    
    // When
    let numberOfSections = sut.numberOfSections(in: sut.tableView!)
    
    // Then
    XCTAssertEqual(numberOfSections, 1, "The number of table view sections should always be 1")
  }
  
  func testNumberOfRowsShouldEqualNumberOfMovieList() {
    // Given
    loadView()
    let mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path")]
    sut.movieList  = mockMovieList

    // When
    let numberOfRows = sut.tableView(sut.tableView!, numberOfRowsInSection: 0)

    // Then
    XCTAssertEqual(numberOfRows, mockMovieList.count, "The number of table view rows should equal the number of orders to display")
  }

  func testShouldConfigureTableViewCellToDisplayMovieDetail() {
    // Given
    loadView()
    let mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path", movieInputErrorMessage: "Empty input.")]
    sut.movieList  = mockMovieList
    
    // When
    let indexPath = IndexPath(row: 0, section: 0)
    let cell = sut.tableView(sut.tableView!, cellForRowAt: indexPath) as? MainTableViewCell
    
    // Then
    XCTAssertEqual(cell?.movieNameLabel.text, "Inception", "A properly configured table view cell should display the order movieName")
    XCTAssertEqual(cell?.movieRateLabel.text, "10/10", "A properly configured table view cell should display the order movieRate")
    XCTAssertEqual(cell?.movieInput.text, "Empty input.", "A properly configured table view cell should display the order movieInput")
  }
  
  func testValidateInputCalled() {
    // Given
    loadView()
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    let mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path")]
    sut.movieList = mockMovieList

    
    // When
    let indexPath = IndexPath(row: 0, section: 0)
    let cell = sut.tableView(sut.tableView!, cellForRowAt: indexPath) as? MainTableViewCell
    cell?.movieButtonAction(self)

    
    // Then
    XCTAssertTrue(spy.validateInputCalled, "validateInput() should call when movie button in MainTableViewCell pressed")
  }

  func testRefreshMovieCalled() {
    // Given
    loadView()
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    let mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path")]
    sut.movieList = mockMovieList

    // When
    sut.tableView.refreshControl?.sendActions(for: .valueChanged)

    // Then
    XCTAssertTrue(spy.refreshMovieCalled, "refreshMovie() should call when pulled tableView to refresh")
  }

  func testFetchMoreMovieCalled() {
    // Given
    loadView()
    let spy = MainBusinessLogicSpy()
    sut.interactor = spy
    var mockMovieList = [Main.Something.ViewModel.Movie(movieTitle: "Inception", movieRating: "10/10", moviePosterPath: "Inception Poster path"),
                         Main.Something.ViewModel.Movie(movieTitle: "Shutter Island", movieRating: "10/10", moviePosterPath: "Shutter Island Poster path")]
    mockMovieList += mockMovieList
    sut.movieList = mockMovieList

    // When
    for (i, _) in mockMovieList.enumerated() {
      if i == mockMovieList.count - 1 {
        spy.fetchMoreMovieCalledTimes != 0 ? (spy.fetchMoreMovieCalled = false) : nil
      }
      let indexPath = IndexPath(row: i, section: 0)
      let cell = sut.tableView(sut.tableView!, cellForRowAt: indexPath) as? MainTableViewCell
      sut.tableView(sut.tableView!, willDisplay: cell!, forRowAt: indexPath)
    }
    (spy.fetchMoreMovieCalledTimes == 1 && spy.fetchMoreMovieCalled == true) ? (spy.fetchMoreMovieCalledCorrect = true) : nil

    // Then
    XCTAssertTrue(spy.fetchMoreMovieCalledCorrect, "fetchMoreMovie() should call when scroll tableView to the end of dataSource list")
    XCTAssertEqual(sut.tableView.tableFooterView, sut.loadingSpinner, "fetchMoreMovie() should show loading indicator at bottom of tableView")
  }
  
}
