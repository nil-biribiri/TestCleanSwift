//
//  MainWorker.swift
//  TestCleanSwift
//
//  Created by Tanasak.Nge on 25/5/2561 BE.
//  Copyright (c) 2561 NilNilNil. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class TestHttpClient: HTTPClient {

  static let sharedHttpClient = TestHttpClient()

  override func handleUnauthorized(request: Request) {
    if TokenResponse.shared.accessToken.isEmpty {
    let tokenRequest = Request(endpoint: TokenEndPoint.getToken)
      let result: Result<TokenResponse> = HTTPClient.shared.executeRequest(request: tokenRequest)
      switch result {
      case .success(let response):
        TokenResponse.shared = response.bodyObject
      case .failure(let error):
        print(error.localizedDescription)
      }
    }
  }

  override func adapter(request: inout Request) {
    if !TokenResponse.shared.accessToken.isEmpty {
      request.updateHTTPHeaderFields(headerFields: [Constants.Authorization : "\(TokenResponse.shared.tokenType) \(TokenResponse.shared.accessToken)"])
    }
  }
}

class MainWorker {
  func fetchList(page: String, completion: @escaping (Result<(MovieList)>) -> Void) {
    let request = Request(endpoint: FetchMovieEndPoint.FetchMovieList(page: page))
    HTTPClient.shared.executeRequest(request: request) { (result: Result<MovieList>) in
      completion(result)
    }
  }

  static func testPost() {
    let request = Request(endpoint: FetchMovieEndPoint.testPost(name: "Yo!", job: "iOS"))
    HTTPClient.shared.executeRequest(request: request) { (result: Result<testPostModel>) in
    }
  }

  static func testError() {
//    let httpClient = TestHttpClient()
    let request = Request(endpoint: ActivateEndPoint.activate)
    TestHttpClient.sharedHttpClient.executeRequest(request: request) { (result: Result<EDCActivateResponse>) in
      switch result {
      case .success(let response):
        print("ERRRRR  \(response.bodyObject)")
      case .failure(let error):
        print(error)
      }
    }
  }

}
